import GUI
import file_operations
from fpdf import FPDF
import re, math

def generate_invoices(orders):

    #Function for centring text on width (x-axis)
    def center_text(text):
        sheet_width = pdf.w - 2 * pdf.l_margin
        text_width = pdf.get_string_width(text)
        x_position = (sheet_width - text_width) / 2 + pdf.l_margin
        return x_position

    file_operations.txt_operations.create_invoice_counter()

    date_day, date_month, date_year = file_operations.get_date()
    file_operations.create_invoices_folder()
    file_operations.deleting_previous_pdfs()

    # A4 sheet dimensions
    sheet_width = 210
    sheet_height = 297

    cell_height = 8
    cell_width = 85
    standard_font_size = 9

    for order in orders:

        fv_counter = file_operations.txt_operations.get_invoice_counter()

        pdf = FPDF('P', 'mm', 'A4')

        #New fonts must be bo added due to the need to using UTF-8 encoding
        pdf.add_font('DejaVu', '', "Fonts/DejaVuSansCondensed.ttf", uni=True)
        pdf.add_font('DejaVu-Bold', '', "Fonts/DejaVuSansCondensed-Bold.ttf", uni=True)

        pdf.add_page()
        pdf.set_fill_color(190, 190, 190)
        pdf.set_font('DejaVu-Bold', size=standard_font_size)

        #Adding logo
        pdf.image('logo_pdf.png', w=cell_width, h=5*cell_height)

        sell_date = order['data']
        pdf.set_xy(110, standard_font_size)
        #'Data sprzedaży' - transl. sell date
        pdf.cell(cell_width, cell_height, 'Data sprzedaży', border='T', ln=1, fill=True, align='C')
        pdf.set_xy(110, cell_height+standard_font_size)
        pdf.set_font('DejaVu', size=standard_font_size)

        #sell_date[:-6] to cut off exact order time
        pdf.cell(cell_width, cell_height, f"{sell_date[:-6]}", ln=1, align='C')

        pdf.set_xy(110, cell_height*2+standard_font_size)
        pdf.set_font('DejaVu-Bold', size=standard_font_size)
        #'Data wystawienia' - transl. date of issue
        pdf.cell(cell_width, cell_height, 'Data wystawienia', border='T', ln=1, fill=True, align='C')
        pdf.set_xy(110, cell_height*3+standard_font_size)
        pdf.set_font('DejaVu', size=standard_font_size)
        pdf.cell(cell_width, cell_height, f"{date_day}.{date_month}.{date_year}", ln=1, align='C')
        pdf.cell(cell_width, cell_height, "", ln=1)

        pdf.set_xy(10, cell_height*7+standard_font_size)
        pdf.set_font('DejaVu-Bold', size=standard_font_size)
        #'Sprzedawca' - transl. seller
        pdf.cell(cell_width, cell_height, 'Sprzedawca', border='T', fill=True, align='C')
        pdf.cell(cell_width, cell_height, "", ln=1)
        pdf.set_font('DejaVu', size=standard_font_size)
        pdf.set_left_margin(10)
        #'Imię nazwisko, adres, kod pocztowy' - transl. first name, last name, address, zip code
        pdf.multi_cell(cell_width, cell_height, f"""First and second name\nAddress details\nZip code""", align='C')

        pdf.set_xy(110, cell_height*7+standard_font_size)
        pdf.set_font('DejaVu-Bold', size=standard_font_size)
        #'odbiorca' - transl. receiver
        pdf.cell(cell_width, cell_height, "Odbiorca", border='T', fill=True, align='C')
        pdf.cell(cell_width, cell_height, "", ln=1)
        pdf.set_xy(110, cell_height*8+standard_font_size)
        pdf.set_font('DejaVu', size=standard_font_size)

        pdf.set_left_margin(10)
        customer_details = order['kupujący'].split(';')
        customer_name = customer_details[1]
        customer_address = customer_details[2]
        customer_zipcode = customer_details[3]

        pdf.multi_cell(cell_width, cell_height, f"""{customer_name}\n{customer_address}\n{customer_zipcode}""", align='C')

        pdf.set_xy(0, cell_height*15)
        pdf.set_font('DejaVu-Bold', size=16)
        fv_counter+=1
        #'Dowód sprzedaży nr' - transl. certificate of sale number
        pdf.cell(sheet_width, cell_height, f"Dowód sprzedaży nr {fv_counter}/{date_month}/{date_year}", align='C')

        file_operations.txt_operations.update_invoice_counter(fv_counter)

        pdf.set_font('DejaVu', size=standard_font_size)

        #Separating purchase details relative to ; and |
        purchase_details = re.split(r'[;|]', order['oferta'])
        items_count = sum(item.count('szt.') for item in purchase_details)

        #List of all bought items
        #Skipping every 3 steps because current version of .csv generated by Allegro is as follows:
        #offer_nr;offer_title;bought_quantity
        items = purchase_details[1::3]

        for ordinal_number in range(1, items_count+1):
            #In first iteration max string width is calculated to set the best fitting cell width
            if ordinal_number == 1:
                string_width = 0
                for item in purchase_details:
                    if pdf.get_string_width(item) > string_width:
                        string_width = pdf.get_string_width(item)

                #If calculated string_width is smaller than information about Allegro Smart shipment
                #then string width is set as string width of text of this information
                #Dostawa w ramach Allegro Smart! - transl. shipment within Allegro Smart!
                if string_width < pdf.get_string_width('Dostawa w ramach Allegro Smart!'):
                    string_width = pdf.get_string_width('Dostawa w ramach Allegro Smart!')

                #Adding extra 2mm margin
                string_width += 2
                pdf.set_xy(10, cell_height * 16)
                pdf.set_font('DejaVu-Bold', size=standard_font_size)
                pdf.cell(0, cell_height, "", ln=2)
                pdf.cell(10, cell_height, 'Lp.', border=1, align='C')
                #'Nazwa' - transl. name
                pdf.cell(string_width, cell_height, 'Nazwa', border=1, align='C')
                #'ilość [szt.] - transl. quantity [piece] (1)
                pdf.cell(20, cell_height, 'Ilość [szt.]', border=1, align='C')
                #'cena / sztuka' - transl. price for piece
                pdf.cell(25, cell_height, 'Cena / sztuka', border=1, align='C')
                #'cena / razem' - transl. all-in price
                pdf.cell(25, cell_height, 'Cena razem', border=1, align='C', ln=1)
                pdf.set_font('DejaVu', size=standard_font_size)

            #Cost of shipment and total cost of entire purchase
            shipment = float(order['dostawa'][:-2])
            total_cost = float(order['kwota'][:-2])

            pdf.cell(10, cell_height, f"{ordinal_number}", border=1, align='C')

            #Getting customer nick
            customer_nick = order['kupujący'].split(';')[0]

            #In case the buyer bought various sets, manually setting prices for each good is needed
            #Because of missing information about every set price in .csv generated by Allegro
            if items_count > 1:
                price = GUI.price_incomplete_order(items[ordinal_number-1], customer_nick.replace('_', ':'), sell_date[:-6])

            pdf.cell(string_width, cell_height, items[ordinal_number-1], border=1, align='C')
            #Getting quantities of every bought set
            quantities = [element[:-5] for element in purchase_details if 'szt.' in element]

            #Checking if quantites of each products are greater than 1, if so -> need to calculate correct price for 1 unit
            for quantity in quantities:
                if int(quantity) > 1:
                    unit_per_set_price = (total_cost - shipment) / int(quantity)

            pdf.cell(20, cell_height, quantities[ordinal_number-1], border=1, align='C')

            #In case of buying various sets, price of each good need to be set manually, as previously mentioned
            if items_count > 1:
                pdf.cell(25, cell_height, f"{price}", border=1, align='C')
                pdf.cell(25, cell_height, f"{int(quantities[ordinal_number-1]) * price}", border=1, align='C', ln=1)

            else:
                #.2f to get rid of unnecessary decimal numbers, we're fine with only 2
                pdf.cell(25, cell_height, f"{unit_per_set_price if unit_per_set_price != 1 else total_cost-shipment:.2f} zł", border=1, align='C')
                pdf.cell(25, cell_height, f"{total_cost-shipment:.2f} zł", border=1, align='C', ln=1)
                unit_per_set_price = 1

        pdf.cell(10, cell_height, f"{ordinal_number + 1}", border=1, align='C')
        #'dostawa' - transl. shipment
        pdf.cell(string_width, cell_height, 'Dostawa' if shipment != 0 else 'Dostawa w ramach Allegro Smart!', border=1, align='C')
        pdf.cell(20, cell_height, '1', border=1, align='C')
        pdf.cell(25, cell_height, f"{shipment} zł", border=1, align='C')
        pdf.cell(25, cell_height, f"{shipment} zł", border=1, align='C', ln=1)

        pdf.set_font('DejaVu-Bold', size=standard_font_size)
        pdf.text(0, 200, '-'*205)

        #'razem do zapłaty' - transl. total to pay
        text = f"Razem do zapłaty: {total_cost} zł"
        pdf.text(center_text(text), 210, f"Razem do zapłaty: {total_cost} zł")

        pdf.text(0, 220, '-' * 205)
        pdf.set_font('DejaVu', size=standard_font_size)
        #'powyższa kwota całkowicie została zapłacona poprzez przelew internetowy' - transl. the above amount was paid in full by online transfer
        text = f"Powyższa kwota całkowicie została zapłacona poprzez przelew internetowy {order['operator']}."
        pdf.text(center_text(text), 230, text)

        pdf.set_font('DejaVu', size=standard_font_size-2)
        #"Sprzedaż została zrealizowana na zasadach działalności nierejestrowanej." - transl. the sale was made on an unregistered business basis (business form in Poland)
        text = "Sprzedaż została zrealizowana na zasadach działalności nierejestrowanej."
        pdf.text(center_text(text), 290, text)

        pdf.set_font("Arial", size=12)

        #Replacing ':' to '_' in customers nick to correctly save .pdf invoices
        pdf.output(f"Invoices/Dowód zakupu {customer_nick.replace(':', '_')}.pdf")

    GUI.invoices_finished()
